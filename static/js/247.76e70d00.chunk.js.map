{"version":3,"file":"static/js/247.76e70d00.chunk.js","mappings":"4KAkCA,UA/Ba,WACX,IAAMA,GAAQC,EAAAA,EAAAA,MACd,OACE,eAAIC,UAAU,WAAd,SACGF,GAASA,EAAMG,OAAS,EACvBH,EAAMI,KAAI,SAAAC,GAAI,OACZ,gBAAIH,UAAU,WAAd,WACE,gBACEI,IACED,EAAKE,aAAL,0CACuCF,EAAKE,cACxCC,EAENC,IAAKJ,EAAKK,MAAQL,EAAKM,cACvBC,OAAO,MACPC,MAAM,MACNX,UAAU,aAEZ,iBAAKA,UAAU,cAAf,WACE,uBAAIG,EAAKK,MAAQL,EAAKM,iBACtB,sCAAcN,EAAKS,kBAdOT,EAAKU,GADvB,KAoBd,cAAGb,UAAU,cAAb,uCAIP,C,+IC1BYc,EAAiB,WAC5B,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAWH,GAASI,KAAKL,EAC1B,GAAE,CAACC,IAEGF,CACR,EAEYO,EAAkB,WAE7B,OAA8BR,EAAAA,EAAAA,UAAS,MAAvC,eAAOS,EAAP,KAAgBC,EAAhB,KACQP,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OAPAE,EAAAA,EAAAA,YAAU,YACRM,EAAAA,EAAAA,IAAaR,GACVI,KAAKG,GACLE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,iCAAhB,IACXC,SACJ,GAAE,CAACb,IAEGM,CACR,EAEYzB,EAAe,WAC1B,OAAwBgB,EAAAA,EAAAA,UAAS,MAAjC,eAAOZ,EAAP,KAAa6B,EAAb,KACQd,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRa,EAAAA,EAAAA,GAAUf,GAASI,KAAKU,EACzB,GAAE,CAACd,IAEGf,CACR,C,8LCvCK+B,EAAS,mCAEFC,EAAa,mCAAG,oGACJC,EAAAA,EAAAA,IAAA,kEACsCF,IAFlC,cACrBG,EADqB,yBAMpBA,EAASC,KAAKC,SANM,2CAAH,qDASblB,EAAU,mCAAG,WAAMH,GAAN,uFACDkB,EAAAA,EAAAA,IAAA,6CACiBlB,EADjB,oBACoCgB,IAFnC,cAClBM,EADkB,yBAKjBA,EAASF,MALQ,2CAAH,sDAQVG,EAAU,mCAAG,WAAMC,GAAN,uFACDN,EAAAA,EAAAA,IAAA,0DAC8BM,EAD9B,oBAC+CR,IAF9C,cAClBM,EADkB,yBAIjBA,EAASF,KAAKC,SAJG,2CAAH,sDAOVN,EAAS,mCAAG,WAAMpB,GAAN,uFACAuB,EAAAA,EAAAA,IAAA,6CACiBvB,EADjB,4BACuCqB,IAFvC,cACjBM,EADiB,yBAIhBA,EAASF,KAAKnC,MAJE,2CAAH,sDAOTuB,EAAY,mCAAG,WAAMb,GAAN,uFACHuB,EAAAA,EAAAA,IAAA,6CACiBvB,EADjB,4BACuCqB,IAFpC,cACpBM,EADoB,yBAInBA,EAASF,KAAKC,SAJK,2CAAH,qD","sources":["components/Cast/Cast.jsx","components/Hooks/UseFetchMovies.jsx","services/moviesApi.js"],"sourcesContent":["import { useFetchCast } from 'components/Hooks/UseFetchMovies';\nimport worker from '../../images/worker.png';\n\nconst Cast = () => {\n  const casts = useFetchCast();\n  return (\n    <ul className=\"castList\">\n      {casts && casts.length > 0 ? (\n        casts.map(cast => (\n          <li className=\"castItem\" key={cast.id}>\n            <img\n              src={\n                cast.profile_path\n                  ? `https://image.tmdb.org/t/p/w300/${cast.profile_path}`\n                  : worker\n              }\n              alt={cast.name || cast.original_name}\n              height=\"400\"\n              width=\"300\"\n              className=\"castImg\"\n            />\n            <div className=\"personsName\">\n              <p>{cast.name || cast.original_name}</p>\n              <p>Character:{cast.character}</p>\n            </div>\n          </li>\n        ))\n      ) : (\n        <p className=\"reviewsText\">We don't find any actors</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Cast;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { fetchMovie } from '../../services/moviesApi';\nimport { fetchReviews } from '../../services/moviesApi';\nimport { fetchCast } from '../../services/moviesApi';\n\nexport const useFetchMovies = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMovie(movieId).then(setMovie);\n  }, [movieId]);\n\n  return movie;\n};\n\nexport const useFetchReviews = () => {\n  // const [loading, setLoading] = useState(true);\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchReviews(movieId)\n      .then(setReviews)\n      .catch(error => console.log('Something went wrong Home Page'))\n      .finally();\n  }, [movieId]);\n\n  return reviews;\n};\n\nexport const useFetchCast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchCast(movieId).then(setCast);\n  }, [movieId]);\n\n  return cast;\n};\n","import axios from 'axios';\n\nconst apiKEY = '3cc1352acc3f9742a9cfb3f54e0b60a0';\n\nexport const fetchTrending = async () => {\n  const trending = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKEY}`\n  );\n\n  // console.log(trending.data.results);\n  return trending.data.results;\n};\n\nexport const fetchMovie = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKEY}`\n  );\n  // console.log(response);\n  return response.data;\n};\n\nexport const fetchQuery = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${apiKEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${apiKEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${apiKEY}`\n  );\n  return response.data.results;\n};\n"],"names":["casts","useFetchCast","className","length","map","cast","src","profile_path","worker","alt","name","original_name","height","width","character","id","useFetchMovies","useState","movie","setMovie","movieId","useParams","useEffect","fetchMovie","then","useFetchReviews","reviews","setReviews","fetchReviews","catch","error","console","log","finally","setCast","fetchCast","apiKEY","fetchTrending","axios","trending","data","results","response","fetchQuery","query"],"sourceRoot":""}